#################################Database JDBC URL#################################
conn.url=${connection.url}
#conn.url=jdbc:oracle:thin:@10.10.11.137:1523:DBDEV13
#################################Database Username#################################
conn.username=${username.db}
#conn.username=tch_sit

#################################Database Password#################################
conn.password=${password.db}
#conn.password=tch_sit

#################################InitialLimit########################################
# Sets how many connections are created in the cache when it is created or
# reinitialized. When this property is set to an integer value greater than 0, 
# creating or reinitializing the cache automatically creates the specified number of 
# connections, filling the cache in advance of need.
cache.InitialLimit=50

#################################MinLimit###########################################
#Sets the minimum number of connections the cache maintains.
cache.MinLimit=50

################################	#MaxLimit###########################################
# Sets the maximum number of connection instances the cache can hold. The default
# value is Integer.MAX_VALUE, meaning that there is no limit enforced by the 
# connection cache, so that the number of connections is limited only by the number
# of database sessions configured for the database.
#cache.MaxLimit=6

############################InactivityTimeout#####################################
# Sets the maximum time a physical connection can remain idle in a connection cache.
# An idle connection is one that is not active and does not have a logical handle 
# associated with it. When InactivityTimeout expires, the underlying physical 
# connection is closed. However, the size of the cache is not allowed to shrink 
# below minLimit, if it has been set.
cache.InactivityTimeout=1

######################AbandonedConnectionTimeout##################################
# Sets the maximum time that a connection can remain unused before the connection 
# is closed and returned to the cache. A connection is considered unused if it has 
# not had SQL database activity.
# When AbandonedConnectionTimeout is set, JDBC monitors SQL database activity on each
# logical connection. For example, when stmt.execute is called on the connection,
# a heartbeat is registered to convey that this connection is active. 
# The heartbeats are set at each database execution. If a connection has been 
# inactive for the specified amount of time, the underlying connection is reclaimed 
# and returned to the cache for reuse.
cache.AbandonedConnectionTimeout=1


##################ConnectionWaitTimeout############################################
# Specifies cache behavior when a connection is requested and there are already 
# MaxLimit connections active. If ConnectionWaitTimeout is greater than zero (0), 
# each connection request waits for the specified number of seconds, or until a 
# connection is returned to the cache. If no connection is returned to the cache 
# before the timeout elapses, the connection request returns null.
cache.ConnectionWaitTimeout=1


###########################PropertyCheckInterval##################################
#Sets the time interval at which the cache manager inspects and enforces all specified cache properties. PropertyCheckInterval is set in seconds.
#cache.PropertyCheckInterval=3000
