package com.awl.tch.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.awl.tch.bean.Payment;
import com.awl.tch.constant.Constants;
import com.awl.tch.exceptions.TCHServiceException;
//import com.awl.tch.dao.IrctcDaoImpl;
/*import com.awl.tch.irctc.exception.IRCTCException;
import com.awl.tch.irctc.service.IrctcSaleConfirmSerivceImpl;
import com.awl.tch.irctc.service.IrctcSaleEnqServiceImpl;*/
//import com.awl.tch.model.IrctcDTO;
//import com.tch.irctc.model.SaleConfirm;
//import com.tch.irctc.model.SaleEnquiry;


@Service("enquiryACKServiceImpl")
public class EnquiryACKServiceImpl extends AbstractServiceImpl implements TCHService<Payment>{

	private static Logger logger = LoggerFactory.getLogger(EnquiryACKServiceImpl.class);
	
	/*@Autowired
	@Qualifier(Constants.TCH_IRCTC_DAO)
	IrctcDaoImpl irctcDao;*/
	
	@Override
	public Payment service(Payment input) throws TCHServiceException {
		logger.info("Inside service enq ack");

		logger.debug("App name :[" + input.getAppName()+"]");
		logger.debug("Reference value :["+input.getReferenceValue()+"]");
		logger.debug("RRN :[" + input.getRetrivalRefNumber() +"]");
		switch(input.getAppName().trim()){
		case Constants.TCH_AAB:
			input = aabService.updateStatus(input);
			break;
		case Constants.TCH_EGRAS:
			input = egrasService.updateStatus(input);
			break;
		case Constants.TCH_SBIEPAY :
			input = epayService.updateStatus(input);
			break;
	
		case Constants.TCH_MPOS:
			input = mopsService.updateStatus(input);
			break;
			
		/*case Constants.TCH_IRCTC :
			logger.debug("inside codition for IRCTC");
			SaleConfirm saleConfirm=new SaleConfirm();
			IrctcDTO irctcDto =new IrctcDTO();
			String url=(new StringBuilder(uDto.getUrl()).append(Constants.TCH_IRCTC)).toString();
			saleConfirm.setTid(input.getTerminalId());
			saleConfirm.setAssetSrNo(input.getTerminalSerialNumber());
			saleConfirm.setServiceProvider("WL");
			saleConfirm.setAmount(input.getOriginalAmount());
			saleConfirm.setAppTxnId(input.getAppTxnId());
			saleConfirm.setInvoiceNumber(input.getInvoiceNumber());
			saleConfirm.setRrn(input.getRetrivalRefNumber());
			saleConfirm.setCardDigit(input.getLastFourDigitValue());
			saleConfirm.setCardProvider(input.getCardLabel());
			saleConfirm.setCardType((input.getCardType()).toString());
			saleConfirm.setTimestamp(UtilityHelper.getDateTime());
			
			irctcDto.setTid(input.getTerminalId());
			irctcDto.setAsstSrNo(input.getTerminalSerialNumber());
			irctcDto.setServiceProvider("WL");
			irctcDto.setAmount(input.getOriginalAmount());
			irctcDto.setInvoiceNo(input.getInvoiceNumber());
			irctcDto.setRrn(input.getRetrivalRefNumber());
			irctcDto.setCardigit(input.getLastFourDigitValue());
			irctcDto.setCardProvider(input.getCardLabel());
			irctcDto.setCardType((input.getCardType()).toString());
			irctcDto.setTimeStamp(UtilityHelper.getDateTime());
			irctcDto.setReqType("ENQUIRYACK");
			
			IrctcSaleConfirmSerivceImpl saleCon =new IrctcSaleConfirmSerivceImpl();
			HashMap<String, String> configDetail = enquiryDaoImpl.getUtilityInfo(input.getAppName());
			try {
				saleConfirm = saleCon.cosumeWS(configDetail, saleConfirm);
				input.setStatus(saleConfirm.getStatus());
				irctcDto.setStatus(saleConfirm.getStatus());
				irctcDao.save(irctcDto);
			} catch (IRCTCException e) {
				throw new TCHServiceException(e.getErrorCode(),e.getErrorMessage());
			}
			break;*/
		default :
			break;
		}
	
		logger.debug("Exiting service enq ack");
		return input;
	}
	
	
}
