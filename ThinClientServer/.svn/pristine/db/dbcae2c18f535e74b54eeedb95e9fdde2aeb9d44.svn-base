create or replace 
PROCEDURE TCH_AUTOSETTLEMENT_PROC
( 
  I_TERMINAL_SERIAL_NUMBER IN VARCHAR2 
, O_DEBUG_POINT OUT VARCHAR2
, O_SQL_ERROR_CODE OUT VARCHAR2
, O_APP_ERROR_CODE OUT VARCHAR2
)
AS 
TYPE TCH_STRING_ARRAY IS VARRAY (5000000) OF VARCHAR2(30);
V_CRDB_PID TCH_STRING_ARRAY;
V_AMEX_PID TCH_STRING_ARRAY;
V_TID_AMEX TCH_STRING_ARRAY;
V_TID_MOB TCH_STRING_ARRAY;
V_TID_NORMAL TCH_STRING_ARRAY;
V_TERMINAL_SERIAL_NUMBER TCH_STRING_ARRAY;
V_COUNT VARCHAR2(30):=NULL;

  CURSOR C_BATCH_TERM_LIST IS
    SELECT B_BATCH_NUMBER,B_TERMINAL_SERIAL_NUMBER 
      FROM TCH_BATCH_SUMMARY TBS JOIN TC_TID_HWSR_MAPPING THM ON TBS.B_TERMINAL_SERIAL_NUMBER = THM.HWSRNO 
      WHERE TBS.B_CLOSE_DATE IS NULL
      GROUP BY B_BATCH_NUMBER,B_TERMINAL_SERIAL_NUMBER;
  
BEGIN
  O_DEBUG_POINT:='1';
-- GET ALL PID IN ARRAY
    SELECT P_ID,P_TERMINALID BULK COLLECT INTO V_CRDB_PID,V_TID_NORMAL FROM TCH_PAYMENT_TXN;
    SELECT P_ID,P_TERMINALID BULK COLLECT INTO V_AMEX_PID,V_TID_AMEX FROM TCH_PAYMENT_AMEX_TXN;
    SELECT P_ID BULK COLLECT INTO V_TID_MOB FROM MOB_PAYMENT_TXN;
-- GET ALL TERMINAL_SERIAL_NUMBER
  SELECT DISTINCT TERM_NUM  BULK COLLECT INTO V_TERMINAL_SERIAL_NUMBER  
  FROM  (
    SELECT DISTINCT P_TERMINAL_SERIAL_NUMBER AS TERM_NUM FROM TCH_PAYMENT_TXN 
    UNION 
    SELECT DISTINCT P_TERMINAL_SERIAL_NUMBER AS TERM_NUM  FROM TCH_PAYMENT_AMEX_TXN
    ); 
  
  SELECT COUNT(TERM_NUM) INTO V_COUNT FROM (
    SELECT DISTINCT P_TERMINAL_SERIAL_NUMBER AS TERM_NUM FROM TCH_PAYMENT_TXN 
    UNION 
    SELECT DISTINCT P_TERMINAL_SERIAL_NUMBER AS TERM_NUM  FROM TCH_PAYMENT_AMEX_TXN
    );
  IF V_COUNT = 0 THEN
    O_DEBUG_POINT :='1A';
    RAISE_APPLICATION_ERROR(-20313,'NO DATA FOUND FOR SETTLEMENT');
  ELSE
    BEGIN
      O_DEBUG_POINT :='1B';
  -- COPY DATA FROM PAYMENT TABLE TO SETTLEMENT TABLE
      INSERT INTO TCH_SETTLED_PAYMENT_TXN SELECT TTP.* FROM TCH_PAYMENT_TXN TTP
       WHERE TTP.P_RESPONSE_CODE = '00' 
        AND TTP.P_REQUEST_TYPE <> 'REVERSAL' 
        AND TTP.P_REQUEST_TYPE <> 'TIP' 
        AND TTP.P_REQUEST_TYPE <> 'VOIDREFUND'
        AND TTP.P_REQUEST_TYPE <> 'VOIDEMISALE'
        AND TTP.P_REQUEST_TYPE <> 'VOIDSCHBK'
        AND TTP.P_REQUEST_TYPE <> 'VOIDSALETIP'
        AND TTP.P_REQUEST_TYPE <> 'VOID';    
  -- COPY DATA FROM AMEX PAYMENT TABLE TO SETTLEMENT TABLE      
      INSERT INTO TCH_SETTLED_PAYMENT_TXN SELECT TTP.* FROM TCH_PAYMENT_AMEX_TXN TTP
       WHERE TTP.P_RESPONSE_CODE = '00' 
        AND TTP.P_REQUEST_TYPE <> 'REVERSAL' 
        AND TTP.P_REQUEST_TYPE <> 'TIP' 
        AND TTP.P_REQUEST_TYPE <> 'VOIDREFUND'
        AND TTP.P_REQUEST_TYPE <> 'VOIDSCHBK'
        AND TTP.P_REQUEST_TYPE <> 'VOIDEMISALE'
        AND TTP.P_REQUEST_TYPE <> 'VOIDSALETIP'
        AND TTP.P_REQUEST_TYPE <> 'VOID'; 
        O_DEBUG_POINT :='1BA';
        
  
      INSERT INTO TCH_SETTLED_PAYMENT_TXN SELECT * FROM MOB_PAYMENT_TXN 
       WHERE P_RESPONSE_CODE = '00'; 
        O_DEBUG_POINT :='1MAA';
--  COPY REJECTED DATA FROM PAYMENT TABLE TO SETTLEMENT TABLE  
      INSERT INTO TCH_SETTLED_PAYMENT_RT_VT_TT SELECT TTP.* FROM TCH_PAYMENT_TXN TTP 
        WHERE (TTP.P_RESPONSE_CODE <> '00' 
              OR TTP.P_REQUEST_TYPE = 'REVERSAL' 
              OR TTP.P_REQUEST_TYPE = 'TIP' 
              OR TTP.P_REQUEST_TYPE = 'VOID'
              OR TTP.P_REQUEST_TYPE = 'VOIDREFUND'
              OR TTP.P_REQUEST_TYPE = 'VOIDSCHBK'
              OR TTP.P_REQUEST_TYPE = 'VOIDEMISALE'
              OR TTP.P_REQUEST_TYPE = 'VOIDSALETIP');
        O_DEBUG_POINT :='1BC';
--  COPY REJECTED DATA FROM AMEX PAYMENT TABLE TO SETTLEMENT TABLE          
      INSERT INTO TCH_SETTLED_PAYMENT_RT_VT_TT SELECT TTP.* FROM TCH_PAYMENT_AMEX_TXN TTP 
        WHERE (TTP.P_RESPONSE_CODE <> '00' 
              OR TTP.P_REQUEST_TYPE = 'REVERSAL' 
              OR TTP.P_REQUEST_TYPE = 'TIP' 
              OR TTP.P_REQUEST_TYPE = 'VOID'
              OR TTP.P_REQUEST_TYPE = 'VOIDREFUND'
              OR TTP.P_REQUEST_TYPE = 'VOIDSCHBK'
              OR TTP.P_REQUEST_TYPE = 'VOIDEMISALE'
              OR TTP.P_REQUEST_TYPE = 'VOIDSALETIP');
              
        O_DEBUG_POINT :='1MAE';
       INSERT INTO TCH_SETTLED_PAYMENT_RT_VT_TT SELECT * FROM MOB_PAYMENT_TXN
        WHERE P_RESPONSE_CODE <> '00'; 
-- used to update settlement flag and delete rows moved to TCH_SETTLED_PAYMENT_TXN from TCH_PAYMENT_TXN table 
      
      IF V_CRDB_PID.COUNT > 0 THEN
        O_DEBUG_POINT :='1BAC';
        FOR INDX IN V_CRDB_PID.FIRST..V_CRDB_PID.LAST LOOP
          DELETE FROM TCH_PAYMENT_TXN WHERE P_ID = V_CRDB_PID(INDX) 
          AND P_TERMINALID = V_TID_NORMAL(INDX);
        END LOOP;
      END IF;
      
      
      -- UPDATE HANDSHAKE TABLE
      IF V_TERMINAL_SERIAL_NUMBER.COUNT > 0 THEN
        O_DEBUG_POINT :='1BD';
         FOR INDX1 IN V_TERMINAL_SERIAL_NUMBER.FIRST..V_TERMINAL_SERIAL_NUMBER.LAST LOOP
          UPDATE TCH_HANDSHAKES SET H_FIRST_TXN_CHK = 'SU-99' WHERE H_TERMINAL_SERIAL_NUMBER = V_TERMINAL_SERIAL_NUMBER(INDX1);
        END LOOP;
      END IF;
     
     IF V_AMEX_PID.COUNT > 0 THEN
         O_DEBUG_POINT :='1BBC';
          FOR INDXX IN V_AMEX_PID.FIRST..V_AMEX_PID.LAST LOOP
            DELETE FROM TCH_PAYMENT_AMEX_TXN WHERE P_ID = V_AMEX_PID(INDXX) 
            AND P_TERMINALID = V_TID_AMEX(INDXX);
          END LOOP; 
     END IF;
-- DELETE FROM MOBILE PAYMENT TABLE;
        O_DEBUG_POINT :='1MBE';
     DELETE FROM MOB_PAYMENT_TXN;
     COMMIT;
     
       O_DEBUG_POINT :='1BE';
       FOR P IN C_BATCH_TERM_LIST LOOP
        UPDATE TCH_BATCH_SUMMARY SET B_CLOSE_DATE = CURRENT_TIMESTAMP 
        WHERE B_TERMINAL_SERIAL_NUMBER = P.B_TERMINAL_SERIAL_NUMBER 
        AND B_BATCH_NUMBER = P.B_BATCH_NUMBER
        AND B_CLOSE_DATE IS NULL;
       END LOOP;
    END;
  END IF;
   O_DEBUG_POINT :='2';
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    IF O_DEBUG_POINT = '1A' THEN
      O_APP_ERROR_CODE:='A-001';
    END IF;
  WHEN OTHERS THEN
    IF O_DEBUG_POINT = '1A' THEN
      O_APP_ERROR_CODE:='A-001';
    END IF;
  O_SQL_ERROR_CODE := SQLCODE;
  
END TCH_AUTOSETTLEMENT_PROC;