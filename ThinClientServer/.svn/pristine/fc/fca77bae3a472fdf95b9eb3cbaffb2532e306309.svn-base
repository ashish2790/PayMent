package com.awl.tch.util;


import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import com.awl.tch.server.TcpServer;
import com.awl.tch.service.MenuObjectServiceImpl;

@Component("appConfig")
public class AppConfigMaster {
	
	
	private static ConcurrentHashMap<String, Map<String,String>> appConfigCache = new ConcurrentHashMap<String, Map<String,String>>(); 
	private static Logger logger = LoggerFactory.getLogger(AppConfigMaster.class);
	
	public static void load(){
		ApplicationContext app = TcpServer.getContext();
		DataSource d = (DataSource) app.getBean("dataSource");
		JdbcTemplate jd = (JdbcTemplate) TcpServer.getContext().getBean("jdbcTemplate",d);
		
		String query = "SELECT * FROM TCH_UTILITY_CONFIG order by U_UTILITY_NAME";
		
		if(Property.isShowSql()){
			logger.debug("SQL query : " + query);
		}
		try{
			List<Map<String,Object>> ls = jd.queryForList(query);
			Map<String,String> row = null;
			
			for(Map<String , Object> map : ls){
				if(appConfigCache.containsKey((String) map.get("U_UTILITY_NAME"))){
					row.put((String) map.get("U_KEY"), (String) map.get("U_VALUE"));
				}else{
					row = new HashMap<String,String>();
					row.put((String) map.get("U_KEY"), (String) map.get("U_VALUE"));
					appConfigCache.put((String) map.get("U_UTILITY_NAME"),row);
				}
			}
			
			logger.debug("Application config loaded successfully...");
		}
		catch(Exception e){
			logger.debug("Excetion while loading Application config details",e);
		}
		
	}
	
	public static Map<String,String>  getConfigValue(String utilityName){
		return appConfigCache.get(utilityName);
	}
	
	public static String  getConfigValue(String utilityName,String key){
		if(appConfigCache.get(utilityName) != null)
			return appConfigCache.get(utilityName).get(key);
		else
			return null;
	}
}
